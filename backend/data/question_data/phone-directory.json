{
    "title": "Phone directory",
    "difficulty": "Hard",
    "accuracy": "25.68%",
    "submissions": "40K+",
    "points": "8",
    "problem": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\">Given a list of contacts contact[] of length n where each contact is a string which exist in a phone directory and a query string s. The task is to implement a search query for the phone directory. Run a search query for each prefix p of the query string s (i.e. from  index 1 to |s|) that prints all the distinct contacts which have the same prefix as p in lexicographical increasing order. Please refer the explanation part for better understanding.</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>\nn = 3\ncontact[] = {\"geeikistest\", \"geeksforgeeks\", \n\"geeksfortest\"}\ns = \"geeips\"\n<strong>Output:</strong>\ngeeikistest geeksforgeeks geeksfortest\ngeeikistest geeksforgeeks geeksfortest\ngeeikistest geeksforgeeks geeksfortest\ngeeikistest\n0\n0\nExplaination: By running the search query on \ncontact list for \"g\" we get: \"geeikistest\", \n\"geeksforgeeks\" and \"geeksfortest\".\nBy running the search query on contact list \nfor \"ge\" we get: \"geeikistest\" \"geeksforgeeks\"\nand \"geeksfortest\".\nBy running the search query on contact list \nfor \"gee\" we get: \"geeikistest\" \"geeksforgeeks\"\nand \"geeksfortest\".\nBy running the search query on contact list \nfor \"geei\" we get: \"geeikistest\".\nNo results found for \"geeip\", so print \"0\". \nNo results found for \"geeips\", so print \"0\".</span></span></pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br>You do not need to read input or print anything. Your task is to complete the function displayContacts() which takes n, contact[ ] and s as input parameters and returns a list of list of strings for required prefixes. If some prefix has no matching contact return \"0\" on that list.</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(|s| * n * max|contact[i]|)\n<strong>Expected Auxiliary Space:</strong> O(n * max|contact[i]|)</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br>1 ≤ T ≤ 100, T = number of test cases<br>1 ≤ n ≤ 50<br>1 ≤ |contact[i]| ≤ 50<br>1 ≤ |s| ≤ 6 </span></span></p>",
    "companies": ["Amazon", "Microsoft", "Snapdeal"]
  }
  