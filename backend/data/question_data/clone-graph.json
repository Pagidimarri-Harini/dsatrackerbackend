{
    "title": "133. Clone Graph",
    "difficulty": "Medium",
    "topics": ["Graph"],
    "companies": [],
    "problem": "<p>Given a reference of a node in a connected undirected graph.</p>\n<p>Return a deep copy (clone) of the graph.</p>\n<p>Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.</p>\n<pre>class Node {\n    public int val;\n    public List<Node> neighbors;\n}</pre>\n<p><strong>Test case format:</strong></p>\n<p>For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.</p>\n<p>An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n<p>The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]\n<strong>Explanation:</strong> There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> adjList = [[]]\n<strong>Output:</strong> [[]]\n<strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> adjList = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> This an empty graph, it does not have any nodes.</pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the graph is in the range [0, 100].</li>\n<li>1 ≤ Node.val ≤ 100</li>\n<li>Node.val is unique for each node.</li>\n<li>There are no repeated edges and no self-loops in the graph.</li>\n<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n"
  }
  